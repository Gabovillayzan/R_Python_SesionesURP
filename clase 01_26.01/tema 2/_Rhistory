histogram(~CW | sp, data = crabs)
bwplot(~CW | sp, data = crabs, layout = c(1, 2))
## Gr´aficos de caja para el sexo seg´un especie
bwplot(sex ~ CW | sp, data = crabs, layout = c(1, 2))
## Tambi´en disponemos de diagramas de dispersi´on. Con la funci´on xyplot en lugar de plot. En este caso
##se necesitan dos variables.
# Como se puede ver en la figura 5, el resultado de esta instrucci´on es un gr´afico con cuatro paneles donde
# podemos estudiar la relaci´on entre dos variables seg´un dos factores.
xyplot(CL ~ CW | sp * sex, data = crabs)
# En algunos casos es preciso modificar la estructura de los datos para poder realizar algunos gr´aficos.
matriz <- data.matrix(crabs[, -c(1, 2, 3)])
vect <- as.vector(t(matriz))
nombres <- factor(rep(names(crabs[, -c(1, 2, 3)]), 200))
especie <- rep(crabs$sp, each = 5)
cangrejos <- data.frame(caract = nombres, val = vect, esp = especie)
cangrejos[1:10, ]
matriz[1:2, ]
##Ahora, la siguiente instrucci´on dibuja el gr´afico de la figura 6.
#diseño divide el dispositivo en tantos filas y columnas como los hay en la estera de la matriz,
#con las columnas-anchos y los fila-alturas especificadas en los respectivos argumentos.
#Gr´aficos de caja de cada variables, seg´un especie
bwplot(esp ~ val | caract, data = cangrejos, layout = c(1, 5))
#MATRICES DE CORRELACIÓN
library(corrplot)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)
M = cor(datos[,2:6])
corrplot(M, method = "circle")
corrplot(M, method = "square")
corrplot(M, method = "ellipse")
corrplot(M, method = "number")
corrplot(M, method = "shade")
corrplot(M, method = "color")
corrplot(M, method = "pie")
corrplot(M, type = "upper")
corrplot(M, type = "lower")
corrplot.mixed(M)
corrplot.mixed(M, lower = "ellipse", upper = "circle")
#GRÁFICOS SPLOM
library(cwhmisc)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)
SplomT(datos[,2:6])
SplomT(datos[,2:6],mainL="",hist="d",cex.diag=0.6,hist.col="green")
#GRÁFICOS PARA GRANDES VOLÚMENES DE DATOS
library(IDPmisc)
iplot(Precio,Piescuad)
iplot(Precio,Piescuad,pixs=4)
ipairs(datos[,2:6],pixs=2)
# library(vcd)
# data("HairEyeColor")
# # Agregado sobre sexo:
# x = margin.table(HairEyeColor, c(1, 2))
# ## Ordinario assocplot:
# windows()
# assoc(x)
# #sombreo basado en los residuales (de independencia)
require(stats)
mosaicplot(Titanic, main = "Sobrevivencia en el Titanic", color = TRUE)
#Fórmula de interface para datos tabulados:
mosaicplot(~ Sex + Age + Survived, data = Titanic, color = TRUE)
#GRÁFICOS DE ESTRELLAS
require(grDevices)
stars(mtcars[, 1:7], key.loc = c(14, 2),
main = "Tendencia en Motores de Autos : stars(*, full = F)", full = FALSE)
#Diagrama de segmentos
palette(rainbow(12, s = 0.6, v = 0.75))
stars(mtcars[, 1:7], len = 0.8, key.loc = c(12, 1.5),
main = "Tendencia en Motores de Autos", draw.segments = TRUE)
# #COORDENADAS PARALELAS
# library(MASS)
# parcoord(state.x77[, c(7, 4, 6, 2, 5, 3)])
#
# ir = rbind(iris3[,,1], iris3[,,2], iris3[,,3])
# parcoord(log(ir)[, c(3, 4, 2, 1)], col = 1 + (0:149)%/%50)
#CARAS DE CHERNOFF
library(aplpack)
data(longley)
faces(longley[1:9,],face.type=0)
faces(longley[1:9,],face.type=1)
plot(longley[1:16,2:3],bty="n")
a=faces(longley[1:16,],plot=FALSE)
plot.faces(a,longley[1:16,2],longley[1:16,3],width=35,height=30)
a=faces(rbind(1:3,5:3,3:5,5:7),plot.faces=FALSE)
plot(0:5,0:5,type="n")
plot(a,x.pos=1:4,y.pos=1:4,1.5,0.7)
#durante la temporada de navidad
faces(face.type=2)
#GRÁFICO SUMMARY
library(aplpack)
plotsummary(cars)
plotsummary(cars, types=c("ecdf", "density", "boxplot"),
y.sizes = c(1,1,1), design ="stripes")
## Not run:
daten<-iris[,2:3]
slider.bootstrap.lm.plot(daten)
## Not run:
slider.hist(log(islands))
## Not run:
slider.lowess.plot(cars)
## Not run:
slider.split.plot.ts(as.vector(sunspots)[1:100])
## Not run:
slider.stem.leaf(islands)
## Not run:
slider.zoom.plot.ts(co2,2)
# xyz<-matrix(rnorm(300),100,3)
# # now start: spin3R(xyz)
#
# stem.leaf(co2)
# stem.leaf.backback(co2[1:120],co2[121:240])
# stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE)
#DIAGRAMAS BEANPLOT
rm(list=ls())
library(beanplot)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)  #deja pegado la variable, para poder invocar directamente las variables de 'datos'
beanplot(Precio~Barrio,col = "lightgray")
library(vioplot)
vioplot(Precio[Barrio=='Este'],Precio[Barrio=='Norte'],Precio[Barrio=='Oeste'],
col="tomato")
View(datos)
#DIAGRAMAS BEANPLOT
rm(list=ls())
library(beanplot)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)  #deja pegado la variable, para poder invocar directamente las variables de 'datos'
beanplot(Precio~Barrio,col = "green")
library(vioplot)
vioplot(Precio[Barrio=='Este'],Precio[Barrio=='Norte'],Precio[Barrio=='Oeste'],
col="tomato")
#DIAGRAMAS BEANPLOT
rm(list=ls())
library(beanplot)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)  #deja pegado la variable, para poder invocar directamente las variables de 'datos'
beanplot(Precio~Barrio,col = "green")
#DIAGRAMAS BEANPLOT
rm(list=ls())
library(beanplot)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)  #deja pegado la variable, para poder invocar directamente las variables de 'datos'
beanplot(Precio~Barrio,col = "green")
library(vioplot)
vioplot(Precio[Barrio=='Este'],Precio[Barrio=='Norte'],Precio[Barrio=='Oeste'],
col="tomato")
rm(list=ls())
rm(list=ls())
library(beanplot)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)  #deja pegado la variable, para poder invocar directamente las variables de 'datos'
beanplot(Precio~Barrio,col = "green")
library(vioplot)
vioplot(Precio[Barrio=='Este'],Precio[Barrio=='Norte'],Precio[Barrio=='Oeste'],
col="tomato")
library(vioplot)
vioplot(Precio[Barrio=='Este'],Precio[Barrio=='Norte'],Precio[Barrio=='Oeste'],
col="tomato")
library(vioplot)
install.packages("vioplot")
library(vioplot)
vioplot(Precio[Barrio=='Este'],Precio[Barrio=='Norte'],Precio[Barrio=='Oeste'],
col="tomato")
?crabs
library(lattice)
library(MASS)
histogram(~CW | sp, data = crabs) # carga la data de cangrejos (usar ?crabs para consultar la ayuda)
bwplot(~CW | sp, data = crabs, layout = c(1, 2)) #histograma que cruza tamaño de caparazon x color o tipo de cangrejo
bwplot(~CW | sp, data = crabs, layout = c(1, 2)) #grafico de cajas. tamaño de caparazon x color de cangrejo
bwplot(sex ~ CW | sp, data = crabs, layout = c(1, 2))
bwplot(sex ~ CW | sp, data = crabs, layout = c(2, 1)) ## Gr´aficos de caja para el sexo seg´un especie
xyplot(CL ~ CW | sp * sex, data = crabs)
matriz <- data.matrix(crabs[, -c(1, 2, 3)])
matriz
crabs
head(crabs,5)
head(matriz,5)
# En algunos casos es preciso modificar la estructura de los datos para poder realizar algunos gr´aficos.
matriz <- data.matrix(crabs[, -c(1, 2, 3)]) #le resta la columna 1,2 y 3  #objeto matriz es mas simple, no tiene nombre de columnas
vect <- as.vector(t(matriz))
nombres <- factor(rep(names(crabs[, -c(1, 2, 3)]), 200))
especie <- rep(crabs$sp, each = 5)  #cada 5 observaciones repite la especie
cangrejos <- data.frame(caract = nombres, val = vect, esp = especie)
cangrejos[1:10, ]
matriz[1:2, ]
##Ahora, la siguiente instrucci´on dibuja el gr´afico de la figura 6.
#diseño divide el dispositivo en tantos filas y columnas como los hay en la estera de la matriz,
#con las columnas-anchos y los fila-alturas especificadas en los respectivos argumentos.
#Gr´aficos de caja de cada variables, seg´un especie
bwplot(esp ~ val | caract, data = cangrejos, layout = c(1, 5))
library(corrplot)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)
M = cor(datos[,2:6])  #usa correlacion de pearson por defecto, pero se puede especificar: method=spearman|pea
corrplot(M, method = "circle")
corrplot(M, method = "square")
M = cor(datos[,2:6], method=spearman)  #usa correlacion de pearson por defecto, pero se puede especificar: method=spearman|pearson
M = cor(datos[,2:6], method="spearman")
corrplot(M, method = "circle")
corrplot(M, method = "ellipse")
corrplot(M, method = "number")
corrplot(M, method = "shade")
corrplot(M, method = "color")
corrplot(M, method = "pie")
corrplot(M, type = "upper")
corrplot.mixed(M)
corrplot.mixed(M, lower = "ellipse", upper = "circle")
library(cwhmisc)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)
SplomT(datos[,2:6])
SplomT(datos[,2:6],mainL="",hist="d",cex.diag=0.6,hist.col="green")
library(IDPmisc)
iplot(Precio,Piescuad)
iplot(Precio,Piescuad,pixs=4)
ipairs(datos[,2:6],pixs=2)
window()
require(stats)
mosaicplot(Titanic, main = "Sobrevivencia en el Titanic", color = TRUE)
mosaicplot(~ Sex + Age + Survived, data = Titanic, color = TRUE)
?mosaicplot
require(grDevices)
stars(mtcars[, 1:7], key.loc = c(14, 2),
main = "Tendencia en Motores de Autos : stars(*, full = F)", full = FALSE)
#Diagrama de segmentos
palette(rainbow(12, s = 0.6, v = 0.75))
stars(mtcars[, 1:7], len = 0.8, key.loc = c(12, 1.5),
main = "Tendencia en Motores de Autos", draw.segments = TRUE)
#CARAS DE CHERNOFF
library(aplpack)
data(longley)
faces(longley[1:9,],face.type=0)
faces(longley[1:9,],face.type=1)
plot(longley[1:16,2:3],bty="n")
a=faces(longley[1:16,],plot=FALSE)
plot.faces(a,longley[1:16,2],longley[1:16,3],width=35,height=30)
a=faces(rbind(1:3,5:3,3:5,5:7),plot.faces=FALSE)
plot(0:5,0:5,type="n")
plot(a,x.pos=1:4,y.pos=1:4,1.5,0.7)
#durante la temporada de navidad
faces(face.type=2)
#GRÁFICO SUMMARY
library(aplpack)
plotsummary(cars)
rm(list=ls())
rm(list=ls())
library(beanplot)
mktdata=read.csv("bancomark",header=T)
mktdata=read.csv("bancomark.xlsx",header=T)
View(mktdata)
rm(list=ls())
rm(list=ls())
library(beanplot)
library(readxl)
bancomark <- read_excel("bancomark.xlsx")
attach(bancomark)
View(bancomark)
rm(list=ls())
library(beanplot)
datos=read.table("PrecioVivienda.txt",header=T)
attach(datos)  #deja pegado la variable, para poder invocar directamente las variables de 'datos'
beanplot(Precio~Barrio,col = "green")
View(datos)
rm(list=ls())
library(beanplot)
library(readxl)
bancomark <- read_excel("bancomark.xlsx")
attach(bancomark)  #deja pegado la variable, para poder invocar directamente las variables de 'datos'
beanplot(edad~y,col = "red")
beanplot(edad~mora,col = "red")
beanplot(trabajo~prestamo,col = "red")
beanplot(trabajo~prestamo,col = "red")
beanplot(prestamo~trabajo,col = "red")
beanplot(prestamo~trabajo,col = "red")
beanplot(trabajo~prestamo,col = "red")
beanplot(balance~prestamo,col = "red")
beanplot(balance~estciv,col = "red")
beanplot(edad~estciv,col = "red")
?beanplot
library(vioplot)
vioplot(balance[trabajo=='unemployed'],balance[trabajo=='management'],balance[trabajo=='technician'],
col="tomato")
vioplot(balance[trabajo=='student'],balance[trabajo=='management'],balance[trabajo=='technician'],
col="tomato")
vioplot(balance[trabajo=='student'],balance[trabajo=='management'],balance[trabajo=='technician'],balance[trabajo=='retired'],
col="tomato")
library(vioplot)
vioplot(balance[trabajo=='student'],balance[trabajo=='management'],balance[trabajo=='retired'],
col="tomato")
library(lattice)
library(MASS)
histogram(~CW | sp, data = bancomark)
library(lattice)
library(MASS)
histogram(~edad | estciv, data = bancomark)
histogram(~edad | balance, data = bancomark)
histogram(~edad | presultado, data = bancomark)
histogram(~presultado | edad, data = bancomark)
histogram(~edad | presultado, data = bancomark)
histogram(~edad | presultado, data = bancomark)
histogram(~balance | presultado, data = bancomark)
histogram(~estciv | presultado, data = bancomark)
histogram(~edad | vivienda, data = bancomark)
bwplot(~edad | vivienda, data = crabs, layout = c(1, 2)) #grafico de cajas. tamaño de caparazon x color de cangrejo
bwplot(~edad | vivienda, data = bancomark, layout = c(1, 2)) #grafico de cajas. tamaño de caparazon x color de cangrejo
bwplot(edad ~ vivienda | sp, data = bancomark, layout = c(1, 2)) ## Gr´aficos de caja para el sexo seg´un especie
bwplot(~edad | vivienda, data = bancomark, layout = c(1, 2)) #grafico de cajas. tamaño de caparazon x color de cangrejo
bwplot(edad ~ vivienda | sp, data = bancomark, layout = c(1, 2)) ## Gr´aficos de caja para el sexo seg´un especie
bwplot(edad ~ vivienda | personal, data = bancomark, layout = c(1, 2)) ## Gr´aficos de caja para el sexo seg´un especie
bwplot(edad ~ vivienda | prestamo, data = bancomark, layout = c(1, 2)) ## Gr´aficos de caja para el sexo seg´un especie
bwplot(edad ~ vivienda | mora, data = bancomark, layout = c(1, 2)) ## Gr´aficos de caja para el sexo seg´un especie
bwplot(edad ~ vivienda | estciv, data = bancomark, layout = c(1, 2)) ## Gr´aficos de caja para el sexo seg´un especie
bwplot(~edad | estciv, data = bancomark, layout = c(1, 2)) #grafico de cajas. tamaño de caparazon x color de cangrejo
histogram(~edad | vivienda, data = bancomark)
bwplot(edad ~ vivienda | estciv, data = bancomark, layout = c(1, 2))
bwplot(~edad | estciv, data = bancomark, layout = c(1, 2))
bwplot(~edad | estciv, data = bancomark, layout = c(1, 2))
bwplot(~edad | estciv, data = bancomark, layout = c(1, 2))
bwplot(edad ~ vivienda | estciv, data = bancomark, layout = c(1, 2))
bwplot(~edad | estciv, data = bancomark, layout = c(1, 2))
bwplot(edad ~ vivienda | presultado, data = bancomark, layout = c(1, 2))
bwplot(edad ~ vivienda | presultado, data = bancomark, layout = c(1, 4))
bwplot(~edad | vivienda, data = bancomark, layout = c(1, 2))
bwplot(edad ~ mora | presultado, data = bancomark, layout = c(1, 4))
bwplot(edad ~ mora | estciv, data = bancomark, layout = c(1, 4))
bwplot(edad ~ mora | estciv, data = bancomark, layout = c(1, 3))
bwplot(~edad | vivienda, data = bancomark, layout = c(1, 2))
bwplot(~edad | presultado, data = bancomark, layout = c(1, 4))
bwplot(~edad | vivienda, data = bancomark, layout = c(1, 2))
bwplot(~edad | mora, data = bancomark, layout = c(1, 2))
bwplot(~edad | presultado, data = bancomark, layout = c(1, 4))
bwplot(~edad | vivienda, data = bancomark, layout = c(1, 2))
bwplot(~edad | vivienda, data = bancomark, layout = c(1, 2))
bwplot(edad ~ mora | estciv, data = bancomark, layout = c(1, 3))
bwplot(~edad | vivienda, data = bancomark, layout = c(1, 2))
bwplot(edad ~ mora | estciv, data = bancomark, layout = c(1, 3))
bwplot(edad ~ mora | estciv, data = bancomark, layout = c(3, 1))
bwplot(edad ~ estciv | mora, data = bancomark, layout = c(3, 1))
xyplot(CL ~ CW | sp * sex, data = crabs)
xyplot(edad | estciv, data = bancomark)
#relacion entre las variables
xyplot(edad ~ balance | estciv * vivienda, data = bancomark)
#relacion entre las variables
xyplot(edad ~ balance | estciv * educacion, data = bancomark)
#relacion entre las variables
xyplot(edad ~ balance | educacion*estciv, data = bancomark)
#relacion entre las variables
xyplot(edad ~ balance | educacion* trabajo, data = bancomark)
#relacion entre las variables
xyplot(edad ~ balance | educacion* presultado, data = bancomark)
#relacion entre las variables
xyplot(edad ~ balance | educacion* prestamo, data = bancomark)
#relacion entre las variables
xyplot(edad ~ balance | vivienda* prestamo, data = bancomark)
#relacion entre las variables
xyplot(edad ~ balance | vivienda* y, data = bancomark)
#relacion entre las variables
xyplot(estciv ~ balance | vivienda* y, data = bancomark)
edad
#relacion entre las variables
xyplot(edad ~ balance | vivienda* y, data = bancomark)
matriz <- data.matrix(crabs[, -c(1, 2, 3)]) #le resta la columna 1,2 y 3  #objeto matriz es mas simple, no tiene nombre de columnas
vect <- as.vector(t(matriz))
nombres <- factor(rep(names(crabs[, -c(1, 2, 3)]), 200))
especie <- rep(crabs$sp, each = 5)  #cada 5 observaciones repite la especie
cangrejos <- data.frame(caract = nombres, val = vect, esp = especie)
cangrejos[1:10, ]
matriz[1:2, ]
#Gr´aficos de caja de cada variables, seg´un especie
bwplot(esp ~ val | caract, data = cangrejos, layout = c(1, 5))
library(corrplot)
datos=bancomark
attach(datos)
library(corrplot)
datos=bancomark
attach(datos)
#matriz de correlaciones
rm(list = ls())
library(corrplot)
datos=bancomark
attach(datos)
library(beanplot)
library(readxl)
bancomark <- read_excel("bancomark.xlsx")
library(corrplot)
datos=bancomark
attach(datos)
library(corrplot)
datos=bancomark
attach(bancomark)
library(beanplot)
library(readxl)
bancomark <- read_excel("bancomark.xlsx")
attach(bancomark)
library(beanplot)
library(readxl)
bancomark <- read_excel("bancomark.xlsx")
attach(bancomark)
M = cor(datos[,1:6], method="spearman")  #usa correlacion de pearson por defecto, pero se puede especificar: method="spearman"|pearson
M = cor(bancomark[,1:6], method="spearman")  #usa correlacion de pearson por defecto, pero se puede especificar: method="spearman"|pearson
M = cor(bancomark[,0:6], method="spearman")  #usa correlacion de pearson por defecto, pero se puede especificar: method="spearman"|pearson
M = cor(bancomark[,0:5], method="spearman")  #usa correlacion de pearson por defecto, pero se puede especificar: method="spearman"|pearson
M = cor(bancomark[,1:5], method="spearman")  #usa correlacion de pearson por defecto, pero se puede especificar: method="spearman"|pearson
M = cor(bancomark[1:5], method="spearman")  #usa correlacion de pearson por defecto, pero se puede especificar: method="spearman"|pearson
M = cor(bancomark[1:6], method="spearman")  #usa correlacion de pearson por defecto, pero se puede especificar: method="spearman"|pearson
M = cor(bancomark[0:5], method="spearman")  #usa correlacion de pearson por defecto, pero se puede especificar: method="spearman"|pearson
rm(list=ls())
library("readxl")
library("ggplot2")
library(glmnet)
library(gee)
library(readxl)
library(leaps)
library(dplyr)
library(caret)
library(pROC)
library("readxl")
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library(glmnet)
install.packages(c("glmnet", "gee"))
library(glmnet)
library(gee)
library(readxl)
library(leaps)
install.packages("leaps")
library(leaps)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(caret)
install.packages("caret")
library(caret)
library(pROC)
install.packages("pROC")
Train=read.csv("data_loan_status_limpia.csv")
setwd("D:/GVILLAYZAN/M+¦dulo III _ Clasificaci+¦n - Regresi+¦n Log+¡stica Binaria")
## Cargar la data
Train=read.csv("data_loan_status_limpia.csv")
View(Train)
sample_n(Train, 3)
cor(Train[2,3,4,5,10,11,12], method = "spearman")
M = cor(Train[,c(2,3,4,5,10,11,12)], method = "spearman")
circle
library(corrplot)
corrplot.mixed(M, lower = "number", upper = "circle")
corrplot.mixed(M, lower = "number", upper = "pie")
Train <- %>% select(CoapplicantIncome,Loan_Amount_Term,Total_income,Amauntxterm, Gender,Dependents,Self_Employed, Credit_History, Property_Area,
Edu_Ma, Loan_Status)
Train <- Train %>% select(CoapplicantIncome,Loan_Amount_Term,Total_income,Amauntxterm, Gender,Dependents,Self_Employed, Credit_History, Property_Area,
Edu_Ma, Loan_Status)
names()
M = cor(Train, method = "spearman")
corrplot.mixed(M, lower = "number", upper = "pie")
set.seed(123)
training.samples <- Train$Loan_Status %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- Train[training.samples, ]
test.data <- Train[-training.samples, ]
Train <- Train %>% select(CoapplicantIncome,Loan_Amount_Term,Total_income,Amauntxterm, Gender,Dependents,Self_Employed, Credit_History, Property_Area,
Edu_Ma, Loan_Status) #se retiraron las variables correlacionadas "ApplicantIncome", "LoanAmount" y "log_LoanAmount"
#categorizar las variables
Train[,5:ncol(Train)] <- lapply(Train[,5:ncol(Train)], as.factor)
#categorizar las variables
train(names)
sample_n(Train, 3)
#categorizar las variables
Train[,5:ncol(Train)] <- lapply(Train[,5:ncol(Train)], as.factor) # categorizo las variables de la 5 hasta la final como CATEGORICAS para que no sean reconocidas como discretas
str(Train)
set.seed(123)
training.samples <- Train$Loan_Status %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- Train[training.samples, ]
test.data <- Train[-training.samples, ]
modelo_logistica=glm(Loan_Status~.,data=train.data,family="binomial" ) # se coloca la y~. que significa contra todas las demas.
summary(modelo_logistica)
proba1=predict(modelo_logistica, newdata=test.data,type="response")
AUC1 <- roc(test.data$Loan_Status, proba1)
gini1 <- 2*(AUC1$auc) -1
library(pROC)
install.packages("AUC")
proba1=predict(modelo_logistica, newdata=test.data,type="response")
AUC1 <- roc(test.data$Loan_Status, proba1)
auc_modelo1=AUC1$auc
gini1 <- 2*(AUC1$auc) -1
PRED <-predict(modelo_logistica,test.data,type="response")
PRED=ifelse(PRED<=0.5,0,1)
PRED=as.factor(PRED)
tabla=confusionMatrix(PRED,test.data$Loan_Status,positive = "1")
# sensibilidad
Sensitivity1=as.numeric(tabla$byClass[1])
# Precision
Accuracy1=tabla$overall[1]
# Calcular el error de mala clasificaci?n
error1=mean(PRED!=test.data$Loan_Status)
install.packages("e1071")
tabla=confusionMatrix(PRED,test.data$Loan_Status,positive = "1")
# sensibilidad
Sensitivity1=as.numeric(tabla$byClass[1])
# Precision
Accuracy1=tabla$overall[1]
# Calcular el error de mala clasificaci?n
error1=mean(PRED!=test.data$Loan_Status)
auc_modelo1
gini1
Accuracy1
error1
Sensitivity1
library(mlr)
install.packages("mlr")
library(mlr)
